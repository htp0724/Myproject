package com.hyun.client;

import org.springframework.boot.autoconfigure.SpringBootApplication;

import io.netty.bootstrap.ServerBootstrap;
import io.netty.channel.ChannelFuture;
import io.netty.channel.ChannelInitializer;
import io.netty.channel.ChannelPipeline;
import io.netty.channel.EventLoopGroup;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.SocketChannel;
import io.netty.channel.socket.nio.NioServerSocketChannel;
import io.netty.handler.ssl.SslContext;
import io.netty.handler.ssl.SslContextBuilder;
import io.netty.handler.ssl.util.SelfSignedCertificate;

@SpringBootApplication
public class NettytoKafka {
	
	static final boolean SSL = System.getProperty("user.dir")+"/mykeystore.jks" != null;
 
	public static void main(String[] args) throws Exception {
		
		// Configure SSL.
        final SslContext sslCtx;
        if (SSL) {
            SelfSignedCertificate ssc = new SelfSignedCertificate();
            sslCtx = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey()).build();
            System.out.println("SSL build");
        } else {
            sslCtx = null;
            System.out.println("sslCtx is null!");
        }
		// 클라이언트의 연결을 수락하는 부모스레드
	    EventLoopGroup bossGroup = new NioEventLoopGroup(1);
	    // 클라이언트의 소켓으로부터 데이터 입출력 및 이벤트 처리를 담당하는 자식스레드 그룹
	    // 인수없는 생성자는 하드웨어가 가지고 있는 cpu코어의 2배를 사용한다.
	    EventLoopGroup workerGroup = new NioEventLoopGroup();
	     
	    try{
	    	
	      ServerBootstrap b = new ServerBootstrap();
	      b.group(bossGroup, workerGroup)
	      	// 네트워크 입출력 모드는 NIO모드로 동작
	        .channel(NioServerSocketChannel.class)
	        // 자식 채널의 초기화 방법 설정
	        .childHandler(new ChannelInitializer <SocketChannel>() {
	          @Override
	          protected void initChannel(SocketChannel ch) {
	            ChannelPipeline p = ch.pipeline();
	            if (sslCtx != null) {
	            	p.addLast(sslCtx.newHandler(ch.alloc()));
	            	System.out.println("sslCtx newHandler!");
	            }
	            // 채널 파이프라인에 수신된 데이터를 처리할 핸들러 지정
	            p.addLast(new NettyToKafkaHandler());
	          }
	        });
	       
	        ChannelFuture f = b.bind(8889).sync();
	        f.channel().closeFuture().sync();
	       
	    } finally {
	      workerGroup.shutdownGracefully();
	      bossGroup.shutdownGracefully();
	    }
	 
	  }
	 
	}
